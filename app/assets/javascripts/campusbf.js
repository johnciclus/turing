// Generated by CoffeeScript 1.3.3
(function() {
  var VM, charToCode, codeToChar, _ref;

  this.console = (_ref = this.console) != null ? _ref : {
    log: function() {
      return 0;
    }
  };

  codeToChar = function(code) {
    return String.fromCharCode(code + 31)[0];
  };

  charToCode = function(char) {
    return char.charCodeAt() - 31;
  };

  VM = (function() {

    function VM() {
      this.pointer = 0;
      this.position = 0;
      this.buffer = {};
      this.input = [];
      this.output = [];
      this.program = [];
      this.stack = [];
      this.loops = {};
    }

    VM.prototype.load = function(program, input) {
      var char, cleanProgram, code, initpos, instruction, position, stack, _i, _j, _len, _len1;
      cleanProgram = [];
      for (_i = 0, _len = program.length; _i < _len; _i++) {
        instruction = program[_i];
        if (instruction === '>' || instruction === '<' || instruction === '+' || instruction === '-' || instruction === 'i' || instruction === 'o' || instruction === '(' || instruction === ')') {
          cleanProgram.push(instruction);
        }
      }
      stack = [];
      for (position in cleanProgram) {
        instruction = cleanProgram[position];
        if (instruction === '(') {
          stack.push(position);
        }
        if (instruction === ')') {
          initpos = stack.pop();
          if (!(initpos != null)) {
            throw 'Error de sintaxis en posición: ' + position;
          }
          this.loops[initpos] = position;
        }
        this.program.push(instruction);
      }
      if (this.program.length === 0) {
        throw "Error: Programa vacio";
      }
      if (stack.length !== 0) {
        throw 'Error de sintaxis en posición: ' + position;
      }
      for (_j = 0, _len1 = input.length; _j < _len1; _j++) {
        char = input[_j];
        code = charToCode(char);
        if (!((1 <= code && code <= 94))) {
          throw "Error: Entrada invalida: " + char;
        }
        this.input.push(code);
      }
      return this.checkbuffer();
    };

    VM.prototype.runStep = function() {
      var instruction;
      instruction = this.program[this.position];
      if (!instruction) {
        return true;
      } else {
        this[instruction]();
        this.position++;
        return false;
      }
    };

    VM.prototype.outputString = function() {
      var code;
      return ((function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.output;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          code = _ref1[_i];
          _results.push(codeToChar(code));
        }
        return _results;
      }).call(this)).join('');
    };

    VM.prototype.inputString = function() {
      var code;
      return ((function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.input;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          code = _ref1[_i];
          _results.push(codeToChar(code));
        }
        return _results;
      }).call(this)).join('');
    };

    VM.prototype.checkbuffer = function() {
      var _ref1;
      return this.buffer[this.pointer] = (_ref1 = this.buffer[this.pointer]) != null ? _ref1 : 0;
    };

    VM.prototype['>'] = function() {
      this.pointer += 1;
      return this.checkbuffer();
    };

    VM.prototype['<'] = function() {
      this.pointer -= 1;
      return this.checkbuffer();
    };

    VM.prototype['+'] = function() {
      this.buffer[this.pointer] += 1;
      if (this.buffer[this.pointer] > 94) {
        return this.buffer[this.pointer] = 0;
      }
    };

    VM.prototype['-'] = function() {
      this.buffer[this.pointer] -= 1;
      if (this.buffer[this.pointer] < 0) {
        return this.buffer[this.pointer] = 94;
      }
    };

    VM.prototype['i'] = function() {
      var value;
      if (this.input.length === 0) {
        this.buffer[this.pointer] = 0;
        return;
      }
      value = this.input.splice(0, 1)[0];
      if (value < 1 || value > 94) {
        throw "Error: Entrada invalida.";
      }
      return this.buffer[this.pointer] = value;
    };

    VM.prototype['o'] = function() {
      return this.output.push(this.buffer[this.pointer]);
    };

    VM.prototype['('] = function() {
      if (this.buffer[this.pointer] !== 0) {
        return this.stack.push(this.position - 1);
      } else {
        return this.position = this.loops[this.position];
      }
    };

    VM.prototype[')'] = function() {
      return this.position = this.stack.pop();
    };

    return VM;

  })();

  this.BF = {
    steps: 0,
    done: true,
    vm: null,
    stepSize: 10000,
    load: function(program, input) {
      this.steps = 0;
      this.vm = new VM();
      this.vm.load(program, input);
      return this.done = false;
    },
    run: function() {
      var i, _i, _ref1,
        _this = this;
      for (i = _i = 0, _ref1 = this.stepSize; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        if (this.done) {
          break;
        }
        this.step();
      }
      if (!this.done) {
        return setTimeout((function() {
          return _this.run();
        }), 0);
      }
    },
    step: function() {
      this.done = this.vm.runStep();
      return this.steps++;
    },
    watch: function() {
      var buffer, child, currentSPAN, input, key, keys, output, _i, _len, _results,
        _this = this;
      if (!this.vm) {
        return;
      }
      output = this.vm.outputString();
      if (output === "") {
        $('#output').text('');
        $('#output').append(' ');
      } else {
        $('#output').text(output);
      }
      input = this.vm.inputString();
      if (input === "") {
        $('#inputTape').text('');
        $('#inputTape').append(' ');
      } else {
        $('#inputTape').text(input);
      }
      if (this.done) {
        $('#progress').text("Terminado en " + this.steps + " pasos");
        $('#run').text('Ejecutar');
        $('#step').text('Paso a paso');
        $('#step, #program, #input').removeAttr('disabled');
      } else {
        $('#progress').text("Corriendo paso " + (this.steps.toString()));
        setTimeout((function() {
          return _this.watch();
        }), 200);
      }
      if (this.previousSPAN) {
        this.previousSPAN.removeClass('current');
      }
      currentSPAN = $("#execution span:nth-child(" + (this.vm.position + 1) + ")");
      currentSPAN.addClass('current');
      this.previousSPAN = currentSPAN;
      buffer = $('#buffer');
      buffer.empty();
      keys = Object.keys(this.vm.buffer).sort(function(a, b) {
        return parseInt(a) - parseInt(b);
      });
      _results = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        child = $("<span> " + this.vm.buffer[key] + " <span/>");
        buffer.append(child);
        if (parseInt(key) === this.vm.pointer) {
          _results.push(child.addClass('current'));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    loadExecutionUI: function() {
      var child, execDIV, instruction, _i, _len, _ref1, _results;
      execDIV = $('#execution');
      execDIV.empty();
      _ref1 = this.vm.program;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        instruction = _ref1[_i];
        child = $("<span>" + instruction + "</span>");
        this.previousSPAN = null;
        execDIV.append(child);
        _results.push(execDIV.append(" "));
      }
      return _results;
    },
    prepareUI: function() {
      $('#output').text('');
      $('#output').append(' ');
      $('#inputTape').text('');
      $('#inputTape').append(' ');
      $('#error').text('');
      $('#run').text('Ejecutar');
      $('#step').text('Paso a paso');
      return $('#step, #program, #input').removeAttr('disabled');
    },
    runningUI: function() {
      this.loadExecutionUI();
      $('#step, #program, #input').attr('disabled', 'disabled');
      return $('#run').text('Matar');
    },
    steppingUI: function() {
      this.loadExecutionUI();
      $('#program, #input').attr('disabled', 'disabled');
      $('#step').text('Siguiente');
      return $('#run').text('Terminar');
    }
  };

  BF.loadAndRun = function() {
    var input, program;
    if (BF.done) {
      try {
        program = $("#program").val();
        input = $("#input").val();
        BF.load(program, input);
        BF.prepareUI();
        BF.runningUI();
        BF.run();
        return BF.watch();
      } catch (error) {
        BF.done = true;
        return $('#error').text(error);
      }
    } else {
      if ($('#run').text() === 'Terminar') {
        BF.runningUI();
        return BF.run();
      } else {
        return BF.done = true;
      }
    }
  };

  BF.loadAndStep = function() {
    var input, program;
    if (BF.done) {
      try {
        program = $("#program").val();
        input = $("#input").val();
        BF.load(program, input);
        BF.prepareUI();
        BF.steppingUI();
        return BF.watch();
      } catch (error) {
        BF.done = true;
        return $('#error').text(error);
      }
    } else {
      return BF.step();
    }
  };

  BF.clean = function() {
    BF.done = true;
    BF.vm = null;
    BF.prepareUI();
    $('#buffer').text('');
    $('#buffer').append(' ');
    $('#execution').text('');
    $('#execution').append(' ');
    return $('#program, #input').val('');
  };

}).call(this);
